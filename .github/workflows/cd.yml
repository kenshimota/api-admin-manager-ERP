name: DEPLOYMENT UPTJAA ERP

on:
  push:
    branches:
      - main
      
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: docker build
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/uptjaa-online:${{ github.sha }} .
      - name: login docker hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_USER_TOKEN }}
      - name: docker push
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/uptjaa-online:${{ github.sha }}
  
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: executing remote ssh commands using password
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.UPTJAA_HOST }}
        username: ${{ secrets.UPTJAA_USERNAME }}
        password: ${{ secrets.UPTJAA_PASSWORD }}
        port: ${{ secrets.UPTJAA_PORT }}
        script: |
          echo "Set variables that API needs it"
          DOCKER_IMAGE=${{ secrets.DOCKER_USERNAME }}/uptjaa-online:${{ github.sha }}
          DATABASE_URL=${{ secrets.UPTJAA_DATABASE_URL }}
          SECRET_KEY_BASE=${{ secrets.SECRET_KEY_BASE_API }}
          echo "Download the latest version API"
          docker pull $DOCKER_IMAGE
          echo "stop first api"
          sleep 2  
          API=$(docker ps -q -f name=api_1)
          if [ ! -z $API ]
          then
            docker stop $API
          fi
          API=$(docker ps -a -q -f name=api_1)
          if [ ! -z $API ]
          then
            docker rm $API
          fi
          sleep 5
          docker run -d \
            --name api_1 \
            --link=database-postgres \
            -e HOSTNAME_APP=web \
            -e RAILS_ENV=production \
            -e SECRET_KEY_BASE=$SECRET_KEY_BASE \
            -e DATABASE_URL=$DATABASE_URL \
            $DOCKER_IMAGE
          docker exec -it api_1 rails db:migrate
          docker exec -it api_1 rails db:seed
          echo "stop second api"
          sleep 2  
          API=$(docker ps -q -f name=api_2)
          if [ ! -z $API ]
          then
            docker stop $API
          fi
          API=$(docker ps -a -q -f name=api_2)
          if [ ! -z $API ]
          then
            docker rm $API
          fi
          sleep 5
          docker run -d \
            --name api_2 \
            --link=database-postgres \
            -e HOSTNAME_APP=web \
            -e RAILS_ENV=production \
            -e SECRET_KEY_BASE=$SECRET_KEY_BASE \
            -e DATABASE_URL=$DATABASE_URL \
            $DOCKER_IMAGE

          echo "stop third api"
          sleep 2  
          API=$(docker ps -q -f name=api_3)
          if [ ! -z $API ]
          then
            docker stop $API
          fi
          API=$(docker ps -a -q -f name=api_3)
          if [ ! -z $API ]
          then
            docker rm $API
          fi
          sleep 5
          docker run -d \
            --name api_3 \
            --link=database-postgres \
            -e HOSTNAME_APP=web \
            -e RAILS_ENV=production \
            -e SECRET_KEY_BASE=$SECRET_KEY_BASE \
            -e DATABASE_URL=$DATABASE_URL \
            $DOCKER_IMAGE
          
          echo "stop fourth api"
          sleep 2  
          API=$(docker ps -q -f name=api_4)
          if [ ! -z $API ]
          then
            docker stop $API
          fi
          API=$(docker ps -a -q -f name=api_4)
          if [ ! -z $API ]
          then
            docker rm $API
          fi
          sleep 5
          docker run -d \
            --name api_4 \
            --link=database-postgres \
            -e HOSTNAME_APP=web \
            -e RAILS_ENV=production \
            -e SECRET_KEY_BASE=$SECRET_KEY_BASE \
            -e DATABASE_URL=$DATABASE_URL \
            $DOCKER_IMAGE




