name: API MANAGER SCHOOL

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      - dev

jobs:
  autoapprove:
    name: Auto Approve a PR by dependabot # Name of the job
    runs-on: ubuntu-latest # Environment on which the job runs
    steps:
      - name: Auto approve
        uses: hmarr/auto-approve-action@v2.0.0 # Custom action for auto approval already available on marketplace
        # Perform the auto approve action only when the PR is raised by dependabot
        if: github.actor == 'dependabot[bot]' || github.actor == 'dependabot-preview[bot]'
        with:
          # Create a personal access token and store it under the Secrets section of the particular repository
          # with the key "ACTIONS_TOKEN"
          github-token: ${{ secrets.ACTIONS_TOKEN }}
  automerge:
    name: Auto merge after successful checks
    # By default, jobs run in parallel. To run the jobs sequentially, they keywords "needs" is needed.
    # Auto merge action can be done only when the PR is approved, hence this automerge needs autoapprove as a prerequisite
    needs: autoapprove
    runs-on: ubuntu-latest
    steps:
      - name: Auto merge
        # Custom action for auto merging already available on marketplace
        uses: pascalgn/automerge-action@135f0bdb927d9807b5446f7ca9ecc2c51de03c4a
        # Perform the auto merge action only when the PR is raised by dependabot
        if: github.actor == 'dependabot[bot]' || github.actor == 'dependabot-preview[bot]'
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_TOKEN }}
          # By default, whenever dependabot raises a PR, it automatically assigns a label named "dependencies"
          # So, this action merges those PRs labelled "dependencies" only
          MERGE_LABELS: dependencies
          MERGE_METHOD: rebase

  container-job:
    runs-on: ubuntu-latest
    environment: ci-test

    env:
      DATABASE_NAME_CI: manager-school-ci
      DATABASE_USERNAME_CI: user
      DATABASE_PASSWORD_CI: manager
      DATABASE_HOSTNAME_CI: localhost
      DATABASE_NAME_TEST: manager-school-ci
      DATABASE_USERNAME_TEST: user
      DATABASE_PASSWORD_TEST: manager
      DATABASE_HOSTNAME_TEST: localhost
      RAILS_ENV: ci
      SECRET_KEY_BASE: ci_test_key

    services:
      postgres:
        image: postgres:14-alpine3.17

        # environment database
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: manager
          POSTGRES_DB: manager-school-ci

        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      - uses: actions/checkout@v3
      - name: Set up Ruby
        uses: ruby/setup-ruby@ec02537da5712d66d4d50a0f33b7eb52773b5ed1
        with:
          ruby-version: "3.0.2"
      - name: install dependencies
        run: |
          bundle install
      - name: executing migrations
        run: |
          rails db:migrate
      - name: executing unit tests
        run: |
          RAILS_ENV=ci rspec
