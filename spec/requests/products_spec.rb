require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/products", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Product. As you add validations to Product, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      bar_code: "123456789011",
      code: "a524a78126A",
      name: "Product 1",
      tax_id: FactoryBot.create(:tax_with_percentage).id,
    }
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # ProductsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }

  describe "GET /index" do
    before(:each) do
      n = 0
      codes = Set.new
      taxes = [FactoryBot.create(:tax_without_percentage), FactoryBot.create(:tax_with_percentage)]

      while n < 30
        data = {
          name: Faker::Commerce.product_name,
          code: Faker::Code.asin,
          bar_code: Faker::Barcode.ismn,
          tax: taxes[n % 2],
        }

        if !codes.include?(data[:code])
          Product.create(data)
          codes << data[:code]
          n += 1
        end
      end

      FactoryBot.create(:product)
    end

    it "a user can't see the list products only if you've signin" do
      get products_url
      expect(response).to have_http_status(:unauthorized)
    end

    it "request without query params", :authorized => true do
      get products_url
      body = JSON.parse(response.body)

      expect(response).to have_http_status(200)
      expect(body.length).to be(20)
    end

    it "request with query params page '2'", :authorized => true do
      get products_url, params: { page: 2 }
      body = JSON.parse(response.body)

      expect(response).to have_http_status(200)
      expect(body.length).to be(11)
    end

    it "request with query params metadata: '1'", :authorized => true do
      get products_url, params: { metadata: 2 }
      body = JSON.parse(response.body)
      first = body.first

      expect(response).to have_http_status(200)
      expect(body.length).to be(20)
      expect(first["tax"].nil?).to be(false)
    end

    it "request with query params q: 'product app -', page '1'", :authorized => true do
      get products_url, params: { page: 1, q: "product app -" }
      body = JSON.parse(response.body)

      expect(response).to have_http_status(200)
      expect(body.length).to be(1)
    end

    it "request with query params q: 'mystring', page '1'", :authorized => true do
      get products_url, params: { page: 1, q: "MystrIng" }
      body = JSON.parse(response.body)

      expect(response).to have_http_status(200)
      expect(body.length).to be(1)
    end

    it "request with query params q: 'mystring', page '2'", :authorized => true do
      get products_url, params: { page: 2, q: "mystring" }
      body = JSON.parse(response.body)

      expect(response).to have_http_status(200)
      expect(body.length).to be(0)
    end

    it "request with query params order_by '{ field: :name, order: :desc }' ", :authorized => true do
      products = Product.order(name: :desc).page(1)
      get products_url, params: { order_by: { field: :name, order: :desc }, page: 1 }
      body = JSON.parse(response.body)

      expect(response).to have_http_status(200)
      expect(body.map { |product| product["id"] }).to eq(products.map { |product| product.id })
    end

    it "request with query params order_by '{ field: :name }' ", :authorized => true do
      products = Product.order(name: :asc).page(1)
      get products_url, params: { order_by: { field: :name }, page: 1 }
      body = JSON.parse(response.body)

      expect(response).to have_http_status(200)
      expect(body.map { |product| product["id"] }).to eq(products.map { |product| product.id })
    end

    it "request with query params order_by '{  field: :name, order: :asc }' ", :authorized => true do
      get products_url, params: { order_by: { field: :name, order: :asc } }
      body = JSON.parse(response.body)
      products = Product.order(name: :asc).page(1)

      expect(response).to have_http_status(200)
      expect(body.map { |product| product["id"] }).to eq(products.map { |product| product.id })
    end
  end

  describe "GET /show" do
    let(:product) { Product.create(valid_attributes) }

    it "a user can't see a product only if you've signin" do
      get product_url(product)
      expect(response).to have_http_status(:unauthorized)
    end

    it "renders a successful response", authorized: true do
      get product_url(product)
      expect(response).to be_successful

      body = JSON.parse(response.body)
      expect(body["tax"].nil?).to be(false)
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Product" do
        post products_url, params: { product: valid_attributes }
        expect(response).to have_http_status(:unauthorized)
      end

      it "creates a new Product", authorized: true do
        expect { post products_url, params: { product: valid_attributes } }.to change(Product, :count).by(1)
      end

      it "renders a JSON response with the new Product", authorized: true do
        post products_url, params: { product: valid_attributes }, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Product without name", authorized: true do
        invalid_attributes = valid_attributes.clone
        invalid_attributes[:name] = ""

        expect {
          post products_url,
               params: { product: invalid_attributes }, as: :json
        }.to change(Product, :count).by(0)
      end

      it "does not create a new Product without code", authorized: true do
        invalid_attributes = valid_attributes.clone
        invalid_attributes[:code] = ""

        expect {
          post products_url,
               params: { product: invalid_attributes }, as: :json
        }.to change(Product, :count).by(0)
      end

      it "does not create a new Product without bar_code", authorized: true do
        invalid_attributes = valid_attributes.clone
        invalid_attributes[:bar_code] = "as"

        expect {
          post products_url,
               params: { product: invalid_attributes }, as: :json
        }.to change(Product, :count).by(0)
      end

      it "renders a JSON response with errors for the new Product", authorized: true do
        invalid_attributes = valid_attributes.clone
        invalid_attributes[:code] = ""

        post products_url,
             params: { product: invalid_attributes }, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_name) { "nuevo nombre" }
      let(:new_code) { "b900000000123234A" }
      let(:new_bar_code) { "65172465374126786" }

      let(:new_attributes) {
        data = valid_attributes.clone
        data[:name] = new_name
        data[:code] = new_code
        data[:bar_code] = new_bar_code
        return data
      }

      it "doesn't update the requested product if the user hasn't signin" do
        product = Product.create(valid_attributes)
        patch product_url(product), params: { product: new_attributes }, as: :json
        expect(response).to have_http_status(:unauthorized)
      end

      it "updates the requested product", authorized: true do
        product = Product.create(valid_attributes)
        patch product_url(product), params: { product: new_attributes }, as: :json
        product.reload

        expect(product.name).to eq(new_name)
        expect(product.code).to eq(new_code)
        expect(product.bar_code).to eq(new_bar_code)
      end

      it "renders a JSON response with the product", authorized: true do
        product = Product.create! valid_attributes
        patch product_url(product), params: { product: new_attributes }, as: :json
        expect(response).to have_http_status(:accepted)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the product without code", authorized: true do
        product = Product.create(valid_attributes)
        invalid_attributes = valid_attributes.clone
        invalid_attributes[:code] = ""

        patch product_url(product), params: { product: invalid_attributes }, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end

      it "renders a JSON response with errors for the product without name", authorized: true do
        product = Product.create(valid_attributes)
        invalid_attributes = valid_attributes.clone
        invalid_attributes[:name] = ""

        patch product_url(product), params: { product: invalid_attributes }, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end

      it "renders a JSON response with errors for the product without bar_code", authorized: true do
        product = Product.create(valid_attributes)
        invalid_attributes = valid_attributes.clone
        invalid_attributes[:bar_code] = "s"

        patch product_url(product), params: { product: invalid_attributes }, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested product" do
      product = Product.create(valid_attributes)
      delete product_url(product), headers: valid_headers, as: :json
      expect(response).to have_http_status(:unauthorized)
    end

    it "destroys the requested product", authorized: true do
      product = Product.create(valid_attributes)
      expect {
        delete product_url(product), headers: valid_headers, as: :json
      }.to change(Product, :count).by(-1)
    end
  end
end
