require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/products_prices_histories", type: :request do
  let(:user) { User.first || FactoryBot.create(:user) }
  let(:currency) { Currency.first || FactoryBot.create(:currency) }
  let(:product_attributes) { FactoryBot.attributes_for(:product) }

  describe "GET /index" do
    before(:each) do
      n = 0
      codes = Set.new

      while n < 35
        code = Faker::Code.asin
        next if codes.include?(code)

        product = Product.new(product_attributes)
        product.code = code
        product.name = Faker::Commerce.product_name
        product.save!

        price = ProductsPrice.new(product: product, currency: currency, price: Faker::Commerce.price)
        price.set_user user
        price.save!

        codes << code
        n += 1
      end
    end

    it "a user can't see the prices histories only if you've signin" do
      get products_prices_histories_url
      expect(response).to have_http_status(:unauthorized)
    end

    it "the price histories page '1'", authorized: true do
      get products_prices_histories_url
      body = JSON.parse(response.body)

      expect(response).to have_http_status(:ok)
      expect(body.length).to be(20)
    end

    it "the price histories page '2'", authorized: true do
      get products_prices_histories_url, params: { page: 2 }
      body = JSON.parse(response.body)

      expect(response).to have_http_status(:ok)
      expect(body.length).to be(15)
    end

    it "the price histories page '1', product_id ':id'", authorized: true do
      product = Product.last
      get products_prices_histories_url, params: { product_id: product.id }
      body = JSON.parse(response.body)
      product_price = ProductsPrice.where(product_id: product.id).first

      expect(response).to have_http_status(:ok)
      expect(body.length).to be(1)
      expect(body[0]["price_before"].to_f).to eq(0.0)
      expect(body[0]["price_after"].to_f).to eq(product_price.price.to_f)
    end

    it "the price histories page '2', product_id ':id'", authorized: true do
      product = Product.last
      get products_prices_histories_url, params: { page: 2, product_id: product.id }
      body = JSON.parse(response.body)

      product_price = ProductsPrice.where(product_id: product.id).first

      expect(response).to have_http_status(:ok)
      expect(body.length).to be(0)
    end

    it "the inventory histories page '1', currency_id ':id'", authorized: true do
      currency = Currency.last
      get products_prices_histories_url, params: { currency_id: currency.id }
      body = JSON.parse(response.body)

      expect(response).to have_http_status(:ok)
      expect(body.length).to be(20)
    end

    it "the inventory histories page '1', currency_id ':id'", authorized: true do
      currency = Currency.last
      get products_prices_histories_url, params: { page: 2, currency_id: currency.id }
      body = JSON.parse(response.body)

      expect(response).to have_http_status(:ok)
      expect(body.length).to be(15)
    end

    it "the inventory histories page '1', currency_id ':id', metadata '1'", authorized: true do
      currency = Currency.last
      get products_prices_histories_url, params: { page: 2, currency_id: currency.id, metadata: 1 }
      body = JSON.parse(response.body)
      first = body.first

      expect(response).to have_http_status(:ok)
      expect(body.length).to be(15)
      expect(first["tax"].nil?).to be(false)
      expect(first["product"].nil?).to be(false)
      expect(first["currency"].nil?).to be(false)
    end

    it "the prices  search ':product_code'", authorized: true do
      product = Product.last
      get products_prices_histories_url, params: { q: product.code.upcase }
      body = JSON.parse(response.body)

      count = ProductsPricesHistory.where(products_price: ProductsPrice.where(product: product)).count

      expect(response).to have_http_status(:ok)
      expect(body.length).to be(count)
    end
  end

  describe "GET /show" do
    before(:each) do
      product = Product.first || FactoryBot.create(:product)
      product_price = ProductsPrice.new(product: product, currency: currency, price: 1)
      product_price.set_user user
      product_price.save!
    end

    it "you can't see a product price history whetter  you didn't signin it" do
      products_prices_history = ProductsPricesHistory.last
      get products_prices_history_url(products_prices_history), as: :json
      expect(response).to have_http_status(:unauthorized)
    end

    it "renders a successful response", authorized: true do
      products_prices_history = ProductsPricesHistory.last
      get products_prices_history_url(products_prices_history), as: :json
      body = JSON.parse(response.body)

      expect(response).to be_successful
      expect(body["tax"].nil?).to be(false)
      expect(body["product"].nil?).to be(false)
      expect(body["currency"].nil?).to be(false)
    end
  end
end
