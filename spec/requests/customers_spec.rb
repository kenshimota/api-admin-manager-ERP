require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/customers", type: :request do
  let(:name) do
    str = ""
    while str.length < 3
      str = Faker::Name.first_name
    end
    str
  end

  let(:last_name) do
    str = ""
    while str.length < 3
      str = Faker::Name.last_name
    end
    str
  end

  let(:identity_document) { |n| Faker::Number.number(digits: 8) }

  let(:valid_attributes) {
    {
      name: "Pepito",
      last_name: "Grillo",
      identity_document: 19789456,
      address: Faker::Address.street_address,
      state_id: State.find_or_create_by(name: Faker::Address.state).id,
      city_id: City.find_or_create_by(name: Faker::Address.city).id,
    }
  }

  describe "GET /index" do
    before(:each) do
      n = 0

      while n < 30
        data = {
          name: name,
          last_name: last_name,
          identity_document: Faker::Number.number(digits: 8),
          address: Faker::Address.street_address,
          state: State.find_or_create_by(name: Faker::Address.state),
          city: City.find_or_create_by(name: Faker::Address.city),
        }

        Customer.create(data)
        n += 1
      end

      FactoryBot.create(:customer)
    end

    it "a user can't see the list customers only if you've signin" do
      get customers_url
      expect(response).to have_http_status(:unauthorized)
    end

    it "request without query params", :authorized => true do
      get customers_url

      body = JSON.parse(response.body)

      expect(response).to have_http_status(200)
      expect(body.length).to be(20)
    end

    it "request with query params page '2'", :authorized => true do
      get customers_url, params: { page: 2 }
      body = JSON.parse(response.body)

      expect(response).to have_http_status(200)
      expect(body.length).to be(11)
    end

    it "request with query params q: 'pepit', page '1'", :authorized => true do
      get customers_url, params: { page: 1, q: "pepit" }
      body = JSON.parse(response.body)

      expect(response).to have_http_status(200)
      expect(body.length).to be(1)
    end

    it "request with query params q: '1978542', page '1'", :authorized => true do
      get customers_url, params: { page: 1, q: "1978542" }
      body = JSON.parse(response.body)

      expect(response).to have_http_status(200)
      expect(body.length).to be(1)
    end

    it "request with query params q: '1978542', page '2'", :authorized => true do
      get customers_url, params: { page: 2, q: "1978542" }
      body = JSON.parse(response.body)

      expect(response).to have_http_status(200)
      expect(body.length).to be(0)
    end
  end

  describe "GET /show" do
    let(:customer) { FactoryBot.create(:customer) }

    it "a user can't see a customers only if you've signin" do
      get customer_url(customer)
      expect(response).to have_http_status(:unauthorized)
    end

    it "renders a successful response", authorized: true do
      get customer_url(customer)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Customer" do
        post customers_url, params: { customer: valid_attributes }
        expect(response).to have_http_status(:unauthorized)
      end

      it "creates a new Customer", authorized: true do
        expect { post customers_url, params: { customer: valid_attributes } }.to change(Customer, :count).by(1)
      end

      it "renders a JSON response with the new customer", authorized: true do
        post customers_url,
             params: { customer: valid_attributes }, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Customer without name", authorized: true do
        invalid_attributes = valid_attributes.clone
        invalid_attributes[:name] = ""

        expect {
          post customers_url,
               params: { customer: invalid_attributes }, as: :json
        }.to change(Customer, :count).by(0)
      end

      it "does not create a new Customer without last_name", authorized: true do
        invalid_attributes = valid_attributes.clone
        invalid_attributes[:last_name] = ""

        expect {
          post customers_url,
               params: { customer: invalid_attributes }, as: :json
        }.to change(Customer, :count).by(0)
      end

      it "does not create a new Customer without identity_document", authorized: true do
        invalid_attributes = valid_attributes.clone
        invalid_attributes[:identity_document] = ""

        expect {
          post customers_url,
               params: { customer: invalid_attributes }, as: :json
        }.to change(Customer, :count).by(0)
      end

      it "renders a JSON response with errors for the new customer", authorized: true do
        invalid_attributes = valid_attributes.clone
        invalid_attributes[:identity_document] = ""

        post customers_url,
             params: { customer: invalid_attributes }, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_name) { "nuevo nombre" }
      let(:new_last_name) { "nuevo apellido" }
      let(:new_identity_document) { 123456789 }

      let(:new_attributes) {
        data = valid_attributes.clone
        data[:name] = new_name
        data[:last_name] = new_last_name
        data[:identity_document] = new_identity_document

        return data
      }

      it "doesn't update the requested customer if the user hasn't signin" do
        customer = Customer.create(valid_attributes)
        patch customer_url(customer), params: { customer: new_attributes }, as: :json
        expect(response).to have_http_status(:unauthorized)
      end

      it "updates the requested customer", authorized: true do
        customer = Customer.create(valid_attributes)
        patch customer_url(customer), params: { customer: new_attributes }, as: :json
        customer.reload

        expect(customer.name).to eq(new_name)
        expect(customer.last_name).to eq(new_last_name)
        expect(customer.identity_document).to eq(new_identity_document)
      end

      it "renders a JSON response with the customer", authorized: true do
        customer = Customer.create! valid_attributes
        patch customer_url(customer), params: { customer: new_attributes }, as: :json
        expect(response).to have_http_status(:accepted)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the customer without last_name", authorized: true do
        customer = Customer.create(valid_attributes)
        invalid_attributes = valid_attributes.clone
        invalid_attributes[:last_name] = ""

        patch customer_url(customer), params: { customer: invalid_attributes }, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end

      it "renders a JSON response with errors for the customer without name", authorized: true do
        customer = Customer.create(valid_attributes)
        invalid_attributes = valid_attributes.clone
        invalid_attributes[:name] = ""

        patch customer_url(customer), params: { customer: invalid_attributes }, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end

      it "renders a JSON response with errors for the customer without identity_document", authorized: true do
        customer = Customer.create(valid_attributes)
        invalid_attributes = valid_attributes.clone
        invalid_attributes[:identity_document] = ""

        patch customer_url(customer), params: { customer: invalid_attributes }, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "DELETE /destroy" do
    it "don't destroys the requested customer if user haven't signin" do
      customer = Customer.create(valid_attributes)
      delete customer_url(customer), as: :json

      expect(response).to have_http_status(:unauthorized)
    end

    it "destroys the requested customer", authorized: true do
      customer = Customer.create(valid_attributes)
      expect { delete customer_url(customer), as: :json }.to change(Customer, :count).by(-1)
    end
  end
end
