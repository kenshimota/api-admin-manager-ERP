require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/inventories_histories", type: :request do
  let(:user) { User.first || FactoryBot.create(:user) }

  let(:params_inventory) {
    {
      stock: 10,
      reserved: 0,
      observations: "init test",
      product: FactoryBot.create(:product),
      warehouse: FactoryBot.create(:warehouse),
    }
  }

  let(:inventory) do
    data = params_inventory
    inventory = Inventory.new(params_inventory)

    inventory.set_user user
    inventory.save
    return inventory
  end

  let(:new_inventory) do
    data = params_inventory
    tax = Tax.first || FactoryBot.create(:tax_with_percentage)
    warehouse = Warehouse.create!(name: "warehouse example 1")

    product = Product.create!(
      name: "Topic Product Test",
      code: "TOP01",
      tax: tax,
    )

    data[:warehouse_id] = warehouse.id
    data[:product_id] = product.id
    data[:stock] = 100

    resource = Inventory.new(data)
    resource.set_user user
    resource.save!

    resource
  end

  describe "GET /index" do
    before(:each) do
      current_user = user
      resource = inventory

      for index in 1..35
        resource.increment_stock 10 + index
      end
    end

    it "a user can't see the inventory histories only if you've signin" do
      get inventories_histories_url
      expect(response).to have_http_status(:unauthorized)
    end

    it "the inventory histories page '1'", authorized: true do
      get inventories_histories_url
      body = JSON.parse(response.body)

      expect(response).to have_http_status(:ok)
      expect(body.length).to be(20)
    end

    it "the inventory histories page '2'", authorized: true do
      get inventories_histories_url, params: { page: 2 }
      body = JSON.parse(response.body)

      expect(response).to have_http_status(:ok)
      expect(body.length).to be(16)
    end

    it "the inventory histories page '1', product_id ':id'", authorized: true do
      resource = new_inventory
      resource.increment_stock 12

      get inventories_histories_url, params: { product_id: resource.product.id }
      body = JSON.parse(response.body)

      expect(response).to have_http_status(:ok)
      expect(body.length).to be(2)
      expect(body[0]["after_amount"]).to be(100)
      expect(body[1]["before_amount"]).to be(100)
      expect(body[1]["after_amount"]).to be(112)
    end

    it "the inventory histories page '1', product_id ':id'", authorized: true do
      resource = new_inventory
      resource.increment_stock 12

      get inventories_histories_url, params: { warehouse_id: resource.warehouse.id }
      body = JSON.parse(response.body)

      expect(response).to have_http_status(:ok)
      expect(body.length).to be(2)
      expect(body[0]["after_amount"]).to be(100)
      expect(body[1]["before_amount"]).to be(100)
      expect(body[1]["after_amount"]).to be(112)
    end

    it "the inventory histories page '1', inventory_id ':id'", authorized: true do
      resource = new_inventory
      resource.increment_stock 12

      get inventories_histories_url, params: { inventory_id: resource.id }
      body = JSON.parse(response.body)

      expect(response).to have_http_status(:ok)
      expect(body.length).to be(2)
      expect(body[0]["after_amount"]).to be(100)
      expect(body[1]["before_amount"]).to be(100)
      expect(body[1]["after_amount"]).to be(112)
    end
  end
end
