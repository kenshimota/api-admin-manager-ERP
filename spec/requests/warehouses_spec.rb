require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/warehouses", type: :request do
  let(:name) { Faker::Commerce.department }
  let(:address) { Faker::Address.street_address }

  # This should return the minimal set of attributes required to create a valid
  # Warehouse. As you add validations to Warehouse, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { name: name, address: address } }
  let(:invalid_attributes) { { name: nil, address: address } }

  describe "GET /index" do
    before(:each) do
      n = 0
      names = Set.new

      while n < 30
        name = Faker::Commerce.department

        if !names.include?(name)
          data = { name: name, address: Faker::Address.street_address }
          Warehouse.create(data)
          n += 1
          names << name
        end
      end

      FactoryBot.create(:warehouse)
    end

    it "a user can't see the list warehouse only if you've signin" do
      get warehouses_url
      expect(response).to have_http_status(:unauthorized)
    end

    it "request without query params", :authorized => true do
      get warehouses_url
      body = JSON.parse(response.body)
      expect(response).to have_http_status(200)
      expect(body.length).to be(20)
    end

    it "request with query params page '2'", :authorized => true do
      get warehouses_url, params: { page: 2 }
      body = JSON.parse(response.body)
      expect(response).to have_http_status(200)
      expect(body.length).to be(11)
    end

    it "request with query params q: 'warehouse f', page '1'", :authorized => true do
      get warehouses_url, params: { page: 1, q: "warehouse F" }
      body = JSON.parse(response.body)
      expect(response).to have_http_status(200)
      expect(body.length).to be(1)
    end

    it "request with query params q: 'aDdrEss Fi', page '1'", :authorized => true do
      get warehouses_url, params: { page: 1, q: "aDdrEss Fi" }
      body = JSON.parse(response.body)
      expect(response).to have_http_status(200)
      expect(body.length).to be(1)
    end

    it "request with query params q: 'warehouse f', page '1'", :authorized => true do
      get warehouses_url, params: { page: 2, q: "WareHouse F" }
      body = JSON.parse(response.body)
      expect(response).to have_http_status(200)
      expect(body.length).to be(0)
    end

    it "request with query params q: 'Address f', page '2'", :authorized => true do
      get warehouses_url, params: { page: 2, q: "Address f" }
      body = JSON.parse(response.body)
      expect(response).to have_http_status(200)
      expect(body.length).to be(0)
    end
  end

  describe "GET /show" do
    it "a user can't see the warehouse only if you've signin" do
      warehouse = FactoryBot.create(:warehouse)
      get warehouse_url(warehouse)
      expect(response).to have_http_status(:unauthorized)
    end

    it "renders a successful response", authorized: true do
      warehouse = FactoryBot.create(:warehouse)
      get warehouse_url(warehouse)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Warehouse when the user hasn't signin" do
        post warehouses_url, params: { warehouse: valid_attributes }
        expect(response).to have_http_status(:unauthorized)
      end

      it "creates a new Warehouse", authorized: true do
        expect { post warehouses_url, params: { warehouse: valid_attributes } }.to change(Warehouse, :count).by(1)
      end

      it "renders a JSON response with the new warehouse", authorized: true do
        post warehouses_url, params: { warehouse: valid_attributes }
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Warehouse", authorized: true do
        expect {
          post warehouses_url,
               params: { warehouse: invalid_attributes }, as: :json
        }.to change(Warehouse, :count).by(0)
      end

      it "renders a JSON response with errors for the new warehouse", authorized: true do
        post warehouses_url,
             params: { warehouse: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) { { name: "warehouse one", address: "new address" } }

      it "updates the requested warehouse when the user hasn't signin" do
        warehouse = Warehouse.create! valid_attributes
        patch warehouse_url(warehouse), params: { warehouse: new_attributes }
        expect(response).to have_http_status(:unauthorized)
      end

      it "updates the requested warehouse", authorized: true do
        warehouse = Warehouse.create! valid_attributes
        patch warehouse_url(warehouse), params: { warehouse: new_attributes }
        warehouse.reload

        expect(warehouse[:name]).to eq(new_attributes[:name])
        expect(warehouse[:address]).to eq(new_attributes[:address])
      end

      it "renders a JSON response with the warehouse", authorized: true do
        warehouse = Warehouse.create! valid_attributes
        patch warehouse_url(warehouse), params: { warehouse: new_attributes }

        expect(response).to have_http_status(:accepted)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the warehouse", authorized: true do
        warehouse = Warehouse.create! valid_attributes
        patch warehouse_url(warehouse), params: { warehouse: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested warehouse", authorized: true do
      warehouse = Warehouse.create! valid_attributes
      expect {
        delete warehouse_url(warehouse)
      }.to change(Warehouse, :count).by(-1)
    end
  end
end
