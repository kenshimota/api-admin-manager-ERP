require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/currencies", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Currency. As you add validations to Currency, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      code: "VES",
      symbol: "Bs",
      exchange_rate: 1,
      name: "1 - Bolivares Venezolanos",
    }
  }

  describe "GET /index" do
    before(:each) do
      num = 0
      codes = Set.new([valid_attributes[:code]])
      names = Set.new([valid_attributes[:name]])

      while num < 24
        code = Faker::Currency.code
        name = Faker::Currency.name

        if !codes.include?(code) and !names.include?(name)
          symbol = Faker::Currency.symbol
          exchange_rate = Faker::Currency.rand_in_range(1, 1000)
          Currency.create!(name: name, exchange_rate: exchange_rate, code: code, symbol: symbol)
          names << name
          codes << code
          num += 1
        end
      end

      Currency.create! valid_attributes
    end

    it "you can't show currencies if you didn't signin" do
      get currencies_url
      expect(response).to have_http_status(:unauthorized)
    end

    it "get first page and response 20 currencies", authorized: true do
      get currencies_url
      body = JSON.parse(response.body)

      expect(response).to have_http_status(:ok)
      expect(body.length).to be(20)
    end

    it "get second page and response 5 currencies", authorized: true do
      get currencies_url, params: { page: 2 }
      body = JSON.parse(response.body)

      expect(response).to have_http_status(:ok)
      expect(body.length).to be(5)
    end

    it "get first page and response 5 currencies", authorized: true do
      get currencies_url, params: { q: "ves" }
      body = JSON.parse(response.body)

      expect(response).to have_http_status(:ok)
      expect(body.length).to be(1)
    end

    it "get second page and look for 'ves'", authorized: true do
      get currencies_url, params: { q: "ves", page: 2 }
      body = JSON.parse(response.body)

      expect(response).to have_http_status(:ok)
      expect(body.length).to be(0)
    end

    it "get first page and look for '1 - Boliv'", authorized: true do
      get currencies_url, params: { q: "1 - boliv" }
      body = JSON.parse(response.body)

      expect(response).to have_http_status(:ok)
      expect(body.length).to be(1)
    end

    it "get first page and order_by name for asc", authorized: true do
      get currencies_url, params: { order_by: { field: :name, order: :asc }, page: 1 }
      result = Currency.page(1).order(name: :asc)
      body = JSON.parse(response.body)

      expect(response).to have_http_status(:ok)
      expect(body.map { |currency| currency["id"] }).to eq(result.map { |currency| currency.id })
    end

    it "get first page and order_by name for desc", authorized: true do
      get currencies_url, params: { order_by: { field: :name, order: :desc }, page: 1 }
      result = Currency.page(1).order(name: :desc)
      body = JSON.parse(response.body)

      expect(response).to have_http_status(:ok)
      expect(body.map { |currency| currency["id"] }).to eq(result.map { |currency| currency.id })
    end

    it "get first page and order_by code for asc", authorized: true do
      get currencies_url, params: { order_by: { field: :code, order: :asc }, page: 1 }
      result = Currency.page(1).order(code: :asc)
      body = JSON.parse(response.body)

      expect(response).to have_http_status(:ok)
      expect(body.map { |currency| currency["id"] }).to eq(result.map { |currency| currency.id })
    end

    it "get first page and order_by code for desc", authorized: true do
      get currencies_url, params: { order_by: { field: :code, order: :desc }, page: 1 }
      result = Currency.page(1).order(code: :desc)
      body = JSON.parse(response.body)

      expect(response).to have_http_status(:ok)
      expect(body.map { |currency| currency["id"] }).to eq(result.map { |currency| currency.id })
    end

    it "get first page and order_by exchange for asc", authorized: true do
      get currencies_url, params: { order_by: { field: :exchange_rate, order: :asc }, page: 1 }
      result = Currency.page(1).order(exchange_rate: :asc)
      body = JSON.parse(response.body)

      expect(response).to have_http_status(:ok)
      expect(body.map { |currency| currency["id"] }).to eq(result.map { |currency| currency.id })
    end

    it "get first page and order_by exchange for desc", authorized: true do
      get currencies_url, params: { order_by: { field: :exchange_rate, order: :desc }, page: 1 }
      result = Currency.page(1).order(exchange_rate: :desc)
      body = JSON.parse(response.body)

      expect(response).to have_http_status(:ok)
      expect(body.map { |currency| currency["id"] }).to eq(result.map { |currency| currency.id })
    end
  end

  describe "GET /show" do
    it "you can't see a currency if you didn't signin" do
      currency = Currency.create! valid_attributes
      get currency_url(currency)
      expect(response).to have_http_status(:unauthorized)
    end

    it "renders a successful response", authorized: true do
      currency = Currency.create! valid_attributes
      get currency_url(currency)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "without i have signin before" do
      it "I can't creates a new Currency" do
        expect {
          post currencies_url,
               params: { currency: valid_attributes }
        }.to change(Currency, :count).by(0)
      end

      it "recibe a response 401 not authorizated" do
        post currencies_url,
             params: { currency: valid_attributes }
        expect(response).to have_http_status(:unauthorized)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with valid parameters" do
      it "creates a new Currency", authorized: true do
        expect {
          post currencies_url,
               params: { currency: valid_attributes }
        }.to change(Currency, :count).by(1)
      end

      it "renders a JSON response with the new currency", authorized: true do
        post currencies_url,
             params: { currency: valid_attributes }

        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Currency", authorized: true do
        invalid_attributes = valid_attributes.clone
        invalid_attributes[:name] = ""

        expect {
          post currencies_url,
               params: { currency: invalid_attributes }
        }.to change(Currency, :count).by(0)
      end

      it "renders a JSON response with errors for the new currency", authorized: true do
        invalid_attributes = valid_attributes.clone
        invalid_attributes[:name] = ""

        post currencies_url,
             params: { currency: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "PATCH /update" do
    let(:new_attributes) {
      {
        code: "VEF",
        name: "Bolivar soberano 2",
        exchange_rate: 2,
        symbol: "Bs.F",
      }
    }

    context "without i didn't signin" do
      it "renders a JSON response with errors for the currency because I didn't signin" do
        currency = Currency.create! valid_attributes
        patch currency_url(currency),
              params: { currency: new_attributes }
        expect(response).to have_http_status(:unauthorized)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with valid parameters" do
      it "updates the requested currency", authorized: true do
        currency = Currency.create! valid_attributes
        patch currency_url(currency),
              params: { currency: new_attributes }

        currency.reload

        expect(currency.name).to eq(new_attributes[:name])
        expect(currency.code).to eq(new_attributes[:code])
        expect(currency.exchange_rate).to eq(new_attributes[:exchange_rate])
        expect(currency.symbol).to eq(new_attributes[:symbol])
      end

      it "renders a JSON response with the currency", authorized: true do
        currency = Currency.create! valid_attributes

        patch currency_url(currency),
              params: { currency: new_attributes }

        expect(response).to have_http_status(:accepted)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the currency", authorized: true do
        currency = Currency.create! valid_attributes
        invalid_attributes = valid_attributes.clone
        invalid_attributes[:code] = ""

        patch currency_url(currency),
              params: { currency: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "DELETE /destroy" do
    it "you don't delete currency if you didn't signin" do
      currency = Currency.create! valid_attributes
      expect {
        delete currency_url(currency)
      }.to change(Currency, :count).by(0)
    end

    it "destroys the requested currency", authorized: true do
      currency = Currency.create! valid_attributes
      expect {
        delete currency_url(currency)
      }.to change(Currency, :count).by(-1)
    end
  end
end
